import pytest
from unittest.mock import MagicMock
from src.bonding_exploiter import BondingExploiter
from src.keenetic_dsl_interface import DslHalBase

@pytest.fixture
def mock_hal():
    """Fixture for a mocked DslHalBase."""
    return MagicMock(spec=DslHalBase)

@pytest.fixture
def bonding_exploiter(mock_hal):
    """Fixture for a BondingExploiter instance with a mocked HAL."""
    return BondingExploiter(hal=mock_hal)

def test_control_bonding_enables(bonding_exploiter, mock_hal):
    """Verify that control_bonding calls the HAL to enable bonding."""
    bonding_exploiter.control_bonding(enabled=True)
    mock_hal.set_bonding_state.assert_called_once_with(True)

def test_control_bonding_disables(bonding_exploiter, mock_hal):
    """Verify that control_bonding calls the HAL to disable bonding."""
    bonding_exploiter.control_bonding(enabled=False)
    mock_hal.set_bonding_state.assert_called_once_with(False)

def test_configure_bonding(bonding_exploiter, mock_hal):
    """Verify that configure_bonding calls the HAL with the correct parameters."""
    group_id = 1
    mode = 'ethernet'
    line_ids = [0, 1]
    bonding_exploiter.configure_bonding(group_id, mode, line_ids)
    mock_hal.configure_bonding_group.assert_called_once_with(group_id, mode, line_ids)

def test_optimize_packet_reordering(bonding_exploiter, mock_hal):
    """Verify that optimize_packet_reordering calls the HAL with the correct delay."""
    delay_ms = 20
    bonding_exploiter.optimize_packet_reordering(delay_ms)
    mock_hal.set_bonding_differential_delay.assert_called_once_with(delay_ms)

def test_bypass_single_ended_detection(bonding_exploiter):
    """Verify that the bypass method returns True as it is a placeholder."""
    # This test confirms the current placeholder behavior.
    # It should be updated when the feature is fully implemented.
    assert bonding_exploiter.bypass_single_ended_detection() is True